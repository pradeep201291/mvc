//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CCIOfficeServiceManagementSystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CCIDatabaseEntities : DbContext
    {
        public CCIDatabaseEntities()
            : base("name=CCIDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AirtelManagement> AirtelManagements { get; set; }
        public DbSet<StaticAdminDetail> StaticAdminDetails { get; set; }
        public DbSet<staticEmployeeDetail> staticEmployeeDetails { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
    
        public virtual int AddNewData(string employeeName, string accountName, string emailAddress, Nullable<int> costCenterId, Nullable<long> mobileNumber, Nullable<long> mobileAcNumber, Nullable<long> datacardNumber, Nullable<long> dataCardAcNumber)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var costCenterIdParameter = costCenterId.HasValue ?
                new ObjectParameter("CostCenterId", costCenterId) :
                new ObjectParameter("CostCenterId", typeof(int));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(long));
    
            var mobileAcNumberParameter = mobileAcNumber.HasValue ?
                new ObjectParameter("MobileAcNumber", mobileAcNumber) :
                new ObjectParameter("MobileAcNumber", typeof(long));
    
            var datacardNumberParameter = datacardNumber.HasValue ?
                new ObjectParameter("DatacardNumber", datacardNumber) :
                new ObjectParameter("DatacardNumber", typeof(long));
    
            var dataCardAcNumberParameter = dataCardAcNumber.HasValue ?
                new ObjectParameter("DataCardAcNumber", dataCardAcNumber) :
                new ObjectParameter("DataCardAcNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewData", employeeNameParameter, accountNameParameter, emailAddressParameter, costCenterIdParameter, mobileNumberParameter, mobileAcNumberParameter, datacardNumberParameter, dataCardAcNumberParameter);
        }
    
        public virtual int DeleteDetails(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDetails", employeeIdParameter);
        }
    
        public virtual int EditSingleData(Nullable<int> userId, string employeeName, string accountName, string emailAddress, Nullable<long> costCenterId, Nullable<long> mobileNumber, Nullable<long> mobileAcNumber, Nullable<long> dataCardNumber, Nullable<long> datacardAcNumber)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var costCenterIdParameter = costCenterId.HasValue ?
                new ObjectParameter("CostCenterId", costCenterId) :
                new ObjectParameter("CostCenterId", typeof(long));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(long));
    
            var mobileAcNumberParameter = mobileAcNumber.HasValue ?
                new ObjectParameter("MobileAcNumber", mobileAcNumber) :
                new ObjectParameter("MobileAcNumber", typeof(long));
    
            var dataCardNumberParameter = dataCardNumber.HasValue ?
                new ObjectParameter("DataCardNumber", dataCardNumber) :
                new ObjectParameter("DataCardNumber", typeof(long));
    
            var datacardAcNumberParameter = datacardAcNumber.HasValue ?
                new ObjectParameter("DatacardAcNumber", datacardAcNumber) :
                new ObjectParameter("DatacardAcNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditSingleData", userIdParameter, employeeNameParameter, accountNameParameter, emailAddressParameter, costCenterIdParameter, mobileNumberParameter, mobileAcNumberParameter, dataCardNumberParameter, datacardAcNumberParameter);
        }
    
        public virtual ObjectResult<getSingleEmployeeDetail_Result> getSingleEmployeeDetail(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSingleEmployeeDetail_Result>("getSingleEmployeeDetail", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetUserName_Result> GetUserName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserName_Result>("GetUserName");
        }
    
        public virtual int SaveDataIntoDataBase(Nullable<long> mobileAcNumber, Nullable<long> airtelNumber, Nullable<int> onetimeCharges, Nullable<double> monthlycharges, Nullable<double> callCharges, Nullable<double> valueAdddedServices, Nullable<double> mobileInternetUsage, Nullable<double> roaming, Nullable<double> discounts, Nullable<double> taxes, Nullable<double> totalCharges, string whoUploaded, Nullable<System.DateTime> uploadedDate, string forWhichMonth)
        {
            var mobileAcNumberParameter = mobileAcNumber.HasValue ?
                new ObjectParameter("MobileAcNumber", mobileAcNumber) :
                new ObjectParameter("MobileAcNumber", typeof(long));
    
            var airtelNumberParameter = airtelNumber.HasValue ?
                new ObjectParameter("AirtelNumber", airtelNumber) :
                new ObjectParameter("AirtelNumber", typeof(long));
    
            var onetimeChargesParameter = onetimeCharges.HasValue ?
                new ObjectParameter("OnetimeCharges", onetimeCharges) :
                new ObjectParameter("OnetimeCharges", typeof(int));
    
            var monthlychargesParameter = monthlycharges.HasValue ?
                new ObjectParameter("Monthlycharges", monthlycharges) :
                new ObjectParameter("Monthlycharges", typeof(double));
    
            var callChargesParameter = callCharges.HasValue ?
                new ObjectParameter("CallCharges", callCharges) :
                new ObjectParameter("CallCharges", typeof(double));
    
            var valueAdddedServicesParameter = valueAdddedServices.HasValue ?
                new ObjectParameter("ValueAdddedServices", valueAdddedServices) :
                new ObjectParameter("ValueAdddedServices", typeof(double));
    
            var mobileInternetUsageParameter = mobileInternetUsage.HasValue ?
                new ObjectParameter("MobileInternetUsage", mobileInternetUsage) :
                new ObjectParameter("MobileInternetUsage", typeof(double));
    
            var roamingParameter = roaming.HasValue ?
                new ObjectParameter("Roaming", roaming) :
                new ObjectParameter("Roaming", typeof(double));
    
            var discountsParameter = discounts.HasValue ?
                new ObjectParameter("Discounts", discounts) :
                new ObjectParameter("Discounts", typeof(double));
    
            var taxesParameter = taxes.HasValue ?
                new ObjectParameter("Taxes", taxes) :
                new ObjectParameter("Taxes", typeof(double));
    
            var totalChargesParameter = totalCharges.HasValue ?
                new ObjectParameter("TotalCharges", totalCharges) :
                new ObjectParameter("TotalCharges", typeof(double));
    
            var whoUploadedParameter = whoUploaded != null ?
                new ObjectParameter("WhoUploaded", whoUploaded) :
                new ObjectParameter("WhoUploaded", typeof(string));
    
            var uploadedDateParameter = uploadedDate.HasValue ?
                new ObjectParameter("UploadedDate", uploadedDate) :
                new ObjectParameter("UploadedDate", typeof(System.DateTime));
    
            var forWhichMonthParameter = forWhichMonth != null ?
                new ObjectParameter("ForWhichMonth", forWhichMonth) :
                new ObjectParameter("ForWhichMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveDataIntoDataBase", mobileAcNumberParameter, airtelNumberParameter, onetimeChargesParameter, monthlychargesParameter, callChargesParameter, valueAdddedServicesParameter, mobileInternetUsageParameter, roamingParameter, discountsParameter, taxesParameter, totalChargesParameter, whoUploadedParameter, uploadedDateParameter, forWhichMonthParameter);
        }
    
        public virtual ObjectResult<viewEmployeeDetails_Result> viewEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewEmployeeDetails_Result>("viewEmployeeDetails");
        }
    }
}
